1. Lack of business definition. It becomes harder to practice DDD.
2. Data model specification. Some low level entities specs and no business domain ones.
3. Assumptions on menu apis. Only read api was specified.
4. Email is used as customer identification for discounts which exploits a vulnerability since its easy for someone to test a huge email database against better discounts.
5. Some scenarios are not relevant on FindMenu spec since it's expected the data is denormalized on database:
    5.1 "find menu from restaurant that is not part of a chain"()
    5.2 "find menu from restaurant that inherits chain menu"()
    5.3 "find menu from restaurant that inherits and overrides chain menu items"()
6. Auth on managing APIs is going to be implemented latter with API tokens.
7. Price is modeled as "Long" since it' easier to support multi currency.
8. The details on how are the rules to pick items and optionals may impact data modeling.
9. Discounts must be further detailed with business. For now, it' only possible to have the discount percent effect on all menu items.
10. The promotion contract may be refined with it's feature team.
11. It's assumed that promotion takes care of vouchers too.
12. It' assumed that promotions micro service will return the final discount as one single promotion. It more than one promo exists for the restaurant/context variables, it' promotion micro service responsibility to consolidate it.
13. There should be a data model change on items that had promotions applied for tracking/auditing purposes. It' going to be implemented in future releases.
14. "find menu with day of the week offer applied" scenario was not covered because this case is supposed to be handled by promotions micro service and it's discount is going to be applied transparently by menu.
15. It's assumed data is consistent on database, so that there are almost no negative scenarios covered (for business rules).
16. Error handling is still in progress. The proper parser of bundle messages will be implemented on http (gateway) layer.
17. Specific environment properties are going to be provided latter with devops team.
18. Restaurant domain is returned from the web gateway layer (http). It's ok by clean architecture since it's a core domain and all layers could have access to it.
In production code it's recommended to have it's own layer pojo, similar to "documents" pojos for mongodb.